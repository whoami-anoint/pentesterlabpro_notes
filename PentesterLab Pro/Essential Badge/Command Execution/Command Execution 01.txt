Command Execution 01

This challenge

Here, you need to start using the functionality as it’s supposed to be used. This will give you an idea of what the code does.

You can see that you provide an IP address and that the application is running the command ping with this IP address. It’s running a command. Let see if there is some way to abuse this functionality. By doing some research, you can find that there is a type of attack named commands injection.
Commands injection

Commands injection can be used to run arbitrary commands on a server. Multiple payloads can be used to trigger this behaviour. For example, let’s say that the initial command is:

ping [parameter]

Where [parameter] is the value you provided in the form or in the URL.

If you look at how the command line works, you can find that there is multiple way to add more commands:

    command1 && command2 that will run command2 if command1 succeeds.
    command1 || command2 that will run command2 if command1 fails.
    command1 ; command2 that will run command1 then command2.
    command1 | command2 that will run command1 and send the output of command1 to command2.
    ...

In this application, we can provide a parameter to command1, but there is no command2. What we are going to do is add our own command. Instead of sending the [parameter] to the command:

ping 127.0.0.1

Where 127.0.0.1 is our [parameter]. We are going to send a malicious [parameter] that will contain another command:

ping 127.0.0.1 ; cat /etc/passwd

The application will think that 127.0.0.1 ; cat /etc/passwd is just a parameter to run command1. But we actually injected command2: cat /etc/passwd.

Now, what we want to do is run the command to score: /usr/local/bin/score [uuid]. We can just use the line above to run this command instead of cat /etc/passwd.


To finish this exercise, you need to run the binary (/usr/local/bin/score) with your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as first argument:

/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8

You can access this exercise using the following URL: http://ptc-f2b50123-23f5794f.libcurl.so/. 
You can also use the TLS version if you're experiencing timeouts due to network filtering: https://ptl-f2b50123-23f5794f.libcurl.so/.

Common Mistakes:

  * Make sure you replace the full netcat command with the score command followed by your UUID: /usr/local/bin/score ....

Steps:
1) Visit the given url: http://ptc-f2b50123-23f5794f.libcurl.so/. And it redirected as: https://ptl-f2b50123-23f5794f.libcurl.so/?ip=127.0.0.1
2) Let's inject with ping command on this ip. And it really works. 
3) Again inject with the adding cat /etc/passwd.
    It seems as: https://ptl-f2b50123-23f5794f.libcurl.so/?ip=ping 127.0.0.1;cat /etc/passwd. And we can read passwd files.
4) Then, (/usr/local/bin/score) with your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) replacing cat /etc/passwd. 
    It seems as:  https://ptl-f2b50123-23f5794f.libcurl.so/?ip=ping 127.0.0.1;/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8
5) Bravo!! Exercise completed!!

        Happy Hacking!! :) 