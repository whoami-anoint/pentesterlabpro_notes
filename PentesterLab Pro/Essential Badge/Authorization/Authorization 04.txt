Authorization 04

When people started building website with database to store information, they had to do a lot of SQL manually. Few people realized that it was not the best solution and started working on smarter alternatives and started building Object-relational mapping (ORM) to easily query the database without any SQL knowledge. For example, in Ruby (using ActiveRecord), you can do things like:

@user = User.find_by_name('pentesterlab')

This will automatically generate and execute the query and retrieve the result in a User object.

Another really handy usage was to automatically create and update an object from a hash:

@user = User.create(myhash) 
[...]
@user.update_attributes(anotherhash)

Unfortunately, this useful feature comes with a security price, if a developer did not correctly ensure that attributes of the object @user were protected, an attacker could arbitrarily overwrite any of these attributes. In this section, we will see some common examples of these types of issues: Mass-Assignment.

In this example, you can register a user. The application has two levels of privileges:

    User.
    Admin.

The admin privilege is set using the attribute admin on the object user. If you look closely at the format used by the web application: user[username] and user[password], you should be able to find a way to get admin access. Three methods can be used:

    Modify the page directly using a browser extension.
    Save the page and modify offline to create a page that will send the right payload to the right URL.
    Use a proxy to intercept the legitimate request and add your parameter (fastest option).


 You can access this exercise using the following URL: http://ptc-89ee18f4-1aa345f2.libcurl.so/. 

 Steps: 
 1) Visit the given link: http://ptc-89ee18f4-1aa345f2.libcurl.so/. 
 2) Register with username 'user1' and password 'password'. But it don't works.
 The objective of this exercise is to find a way to register as a user with the admin privilege"...
You don't have admin privileges.
3) Let's try burpsuite.Again register with new username 'user2' and password 'password'. And look at the HTTP history. 
We can see /Post method in url /signup. 
In request we can get user%5Busername%5D=user2&user%5Bpassword%5D=password&submit=Submit. Simple decode that url with ctrl+shift+U.
And result is: user[username]=user2&user[password]=password&submit=Submit
 We can see that there is probably a object user with multiple attributes. One being username and one being password.
There is another attribute named admin and that will look something like that.
5) Now let's add one malicious attribute when we register. A user hopefully going to become admin.
Then we are going to register user3 and submit. Intercept this one in burpsuite. We can see the request now and going to add a malicious attribute
user[admin]=true. It results: user%5Busername%5D=user4&user%5Bpassword%5D=user4&submit=Submit&user[admin]=true
 And forward the request. We can see more traffic.
6) Boom!! You have admin privileges. Congratulations, you solved this challenge, the key is: d4e03949-edf0-4d94-ac9e-e729834b8e4b.

Happy Hacking!! :) 