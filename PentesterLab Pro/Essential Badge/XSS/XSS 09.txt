XSS 09

This example is a DOM-based XSS. This page could actually be completely static and still be vulnerable.

In this example, you will need to read the code of the page to understand what is happening. 
When the page is rendered, the JavaScript code uses the current URL to retrieve the anchor portion of the URL (#...) and dynamically (on the client side) write it inside the page.
 This can be used to trigger a XSS vulnerability, if you use the payload as part of the URL.

Since most browsers now encode the fragment, this vulnerable application decodes the fragment using the function decodeURIComponent(...). 
With old browsers, the exploitation works even if decodeURIComponent(...) is not present.

 To finish this exercise, you need to trigger a pop-up (alert or confirm) with 
 your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as argument <script>alert('dd19b1aa-7a48-4881-87ce-4fd3f96516f8')</script>. 

  You can access this exercise using the following URL: http://ptl-850581ed-d19a5bef.libcurl.st/. 

  Steps:
    1) Visit the given URL: http://ptl-850581ed-d19a5bef.libcurl.st/ and get redirected to: http://ptl-850581ed-d19a5bef.libcurl.st/index.php#hacker
    2) Observe the source code and we can find:
        <script>document.write(decodeURIComponent(location.hash.substring(1)));</script>

    3) We can use our simple payload after '#'.
        See what I mean:
        http://ptl-850581ed-d19a5bef.libcurl.st/index.php#<script>alert('1')</script>
        Note: It mightn't be worked so copy the url and paste in another tab.
    4) Let's replace '1' with our UUID:
        http://ptl-850581ed-d19a5bef.libcurl.st/index.php#<script>alert('dd19b1aa-7a48-4881-87ce-4fd3f96516f8')</script>
    5) Bravo!! you have already finished this exercise! 

    Happy Hacking!! :) 