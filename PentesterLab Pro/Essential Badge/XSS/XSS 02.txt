XSS 02

In the second example, a bit of filtering is involved. The web developer added some regular expressions, to prevent the simple XSS payload from working.

If you play around, you can see that <script> and </script> are filtered. One of the most basic ways to bypass these types of filters is to play with the case: 
if you try <sCript> and </sCRIpt> for example, you should be able to get the alert box.

 To finish this exercise, you need to trigger a pop-up (alert or confirm) with your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as argument 
 <script>alert('dd19b1aa-7a48-4881-87ce-4fd3f96516f8')</script>. 

  You can access this exercise using the following URL: http://ptl-b8a205bb-2218cd41.libcurl.st/. 

  Steps: 
    1) Visit the given URL: http://ptl-b8a205bb-2218cd41.libcurl.st/. And after opening link from 'click here'.
    2) After opening that link we'll be redirected to: http://ptl-b8a205bb-2218cd41.libcurl.st/index.php?name=hacker
    3) Put some changes just like: hackerlol in parameter. It'll be reflected.
    4) Main thing is we have to observe the source code as how it works.
    5) As before let's put simple xss payload in the parameter: <script>alert<1></script>. 
        But it reflected instead of pop-out.
    6) We can easily observe in source code that the url don't accept <script> in our payload.
        See we can simply make a concept and interrupt in the payload like:
        <sCript>alert(1)</scRipT>
        Wah! I works. We can make such payload if previous don't worked. In fact, we can make captialized any letter of our payload.
    7) As we are able to pop-out the payload now let's try to alert('dd19b1aa-7a48-4881-87ce-4fd3f96516f8').
        Obviously, it works too. And pop-out to screen. Copy the url and paste to the lab.
    8) Bravo!! We've finished this lab too.

        Happy Hacking!! :) 