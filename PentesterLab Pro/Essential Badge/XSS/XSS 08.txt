XSS 08

Here, the value echoed back in the page is correctly encoded. However, there is still a XSS vulnerability in this page. 
To build the form, the developer used and trusted PHP_SELF which is the path provided by the user. 
It's possible to manipulate the path of the application in order to:

   * call the current page (however you will get an HTTP 404 page);
   * get a XSS payload in the page.

This can be done because the current configuration of the server will call /index.php when any URL matching /index.php/... is accessed. 
You can simply get your payload inside the page by accessing /index.php/[XSS_PAYLOAD].
 Now that you know where to inject your payload, you will need to adapt it to get it to work and get the famous alert box.

Trusting the path provided by users is a common mistake, and it can often be used to trigger XSS, as well as other issues.
 This is pretty common in pages with forms, and in error pages (404 and 500 pages).

  To finish this exercise, you need to trigger a pop-up (alert or confirm) with your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) 
  as argument <script>alert('dd19b1aa-7a48-4881-87ce-4fd3f96516f8')</script>. 

   You can access this exercise using the following URL: http://ptl-1ad86b1c-7238d9e7.libcurl.st/. 

   Steps:
    1) Visit the given URL: http://ptl-1ad86b1c-7238d9e7.libcurl.st/. And redirected to: http://ptl-1ad86b1c-7238d9e7.libcurl.st/index.php
    2) Observe the source code. May we notice it gone reflected when we add as:
        http://ptl-1ad86b1c-7238d9e7.libcurl.st/index.php/lol
    3) Put the simple payload to interrupt: 
        http://ptl-1ad86b1c-7238d9e7.libcurl.st/index.php/lol"><script>alert('1')</script><
    4) Let's replace '1' with our UUID as:
        http://ptl-1ad86b1c-7238d9e7.libcurl.st/index.php/lol"><script>alert('dd19b1aa-7a48-4881-87ce-4fd3f96516f8')</script><
    5) Bravo!! We have already finished this exercise! 
    
    Happy Hacking!! :) 